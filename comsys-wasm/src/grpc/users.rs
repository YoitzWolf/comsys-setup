// This file is @generated by prost-build.
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Judge {
    #[prost(int32, tag = "1")]
    pub queue: i32,
    #[prost(int32, tag = "2")]
    pub mark_group: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Role {
    #[prost(oneof = "role::Role", tags = "1, 2, 3, 4, 5")]
    pub role: ::core::option::Option<role::Role>,
}
/// Nested message and enum types in `Role`.
pub mod role {
    #[derive(serde::Deserialize, serde::Serialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Role {
        #[prost(message, tag = "1")]
        Moderator(super::super::generic::Empty),
        /// / id of queue <-> arbitor
        #[prost(message, tag = "2")]
        Arbitor(super::super::generic::Id),
        #[prost(message, tag = "3")]
        Secretary(super::super::generic::Empty),
        /// judge description
        #[prost(message, tag = "4")]
        Judge(super::Judge),
        /// Watch(AccessType<i32>),
        /// /// Ability to create new comps
        /// Create,
        /// /// Moderate comps. i.e. change them, setup judges etc.
        /// Moderator(AccessType<i32>),
        /// /// Administrator of Organisation. Don't need if you pointed as owner.
        /// Administrate,
        /// /// Judge(competition, query, mark group type)
        /// Judge(i32, i32, i32),
        /// Secretary(i32),
        /// Supervisor((i32, i32)),
        #[prost(message, tag = "5")]
        Watcher(super::super::generic::Empty),
    }
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoleMessage {
    #[prost(message, repeated, tag = "1")]
    pub roles: ::prost::alloc::vec::Vec<Role>,
}
/// Generated client implementations.
pub mod user_manage_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct UserManageClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> UserManageClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> UserManageClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            UserManageClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Get User View
        pub async fn get_me(
            &mut self,
            request: impl tonic::IntoRequest<super::super::generic::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::super::auth::UserView>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/users.UserManage/GetMe");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("users.UserManage", "GetMe"));
            self.inner.unary(req, path, codec).await
        }
        /// For Competition (in a fact it is in token)
        pub async fn get_my_comp_role(
            &mut self,
            request: impl tonic::IntoRequest<super::super::generic::Id>,
        ) -> std::result::Result<tonic::Response<super::RoleMessage>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/users.UserManage/GetMyCompRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("users.UserManage", "GetMyCompRole"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn setup_selfname(
            &mut self,
            request: impl tonic::IntoRequest<super::super::generic::StringMessage>,
        ) -> std::result::Result<
            tonic::Response<super::super::generic::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/users.UserManage/SetupSelfname",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("users.UserManage", "SetupSelfname"));
            self.inner.unary(req, path, codec).await
        }
    }
}
