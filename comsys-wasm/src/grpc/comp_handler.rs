// This file is @generated by prost-build.
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoteMessage {
    #[prost(message, optional, tag = "1")]
    pub author: ::core::option::Option<super::auth::UserView>,
    /// queue num.
    #[prost(int32, tag = "2")]
    pub queue_id: i32,
    /// action action id
    #[prost(int32, tag = "3")]
    pub action_id: i32,
    /// mark type
    #[prost(string, tag = "4")]
    pub mark_type: ::prost::alloc::string::String,
    /// mark
    #[prost(int32, tag = "5")]
    pub mark: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VerifyVoteMessage {
    /// message id in the competition pool
    #[prost(int32, tag = "1")]
    pub target_message_id: i32,
    #[prost(int32, tag = "2")]
    pub queue_id: i32,
    #[prost(enumeration = "Verification", tag = "3")]
    pub verdict: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FixVotingMessage {
    #[prost(int32, tag = "1")]
    pub queue_id: i32,
    /// int32 action_id = 3;
    #[prost(enumeration = "Verification", tag = "2")]
    pub verdict: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TryNext {
    #[prost(int32, tag = "1")]
    pub queue_id: i32,
}
/// int32 queue_id = 1;
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlockMessage {}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeMessage {
    #[prost(int32, tag = "1")]
    pub queue_id: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinesSetup {
    /// queue num.
    #[prost(int32, tag = "2")]
    pub queue_id: i32,
    /// action action id
    #[prost(int32, tag = "3")]
    pub action_id: i32,
    ///
    #[prost(int32, repeated, tag = "4")]
    pub fines: ::prost::alloc::vec::Vec<i32>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapMessage {}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EqMessage {
    #[prost(int32, tag = "1")]
    pub comp_id: i32,
    #[prost(message, optional, tag = "2")]
    pub author: ::core::option::Option<super::auth::UserView>,
    #[prost(string, tag = "3")]
    pub signature: ::prost::alloc::string::String,
    #[prost(oneof = "eq_message::Message", tags = "4, 5, 6, 7, 8, 9, 10, 11")]
    pub message: ::core::option::Option<eq_message::Message>,
}
/// Nested message and enum types in `EQMessage`.
pub mod eq_message {
    #[derive(serde::Deserialize, serde::Serialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "4")]
        VoteMessage(super::VoteMessage),
        #[prost(message, tag = "5")]
        VerifyMessage(super::VerifyVoteMessage),
        /// and add to table
        #[prost(message, tag = "6")]
        FixVoting(super::FixVotingMessage),
        #[prost(message, tag = "7")]
        TryNext(super::TryNext),
        #[prost(message, tag = "8")]
        Block(super::BlockMessage),
        #[prost(message, tag = "9")]
        SetActiveAction(super::ActiveActionState),
        #[prost(message, tag = "10")]
        ClearQueueAction(super::super::generic::Id),
        ///
        #[prost(message, tag = "11")]
        FinesSetup(super::FinesSetup),
    }
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EqHistoryMessage {
    #[prost(int32, tag = "1")]
    pub message_id: i32,
    #[prost(message, optional, tag = "2")]
    pub message: ::core::option::Option<EqMessage>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EqHistoryRequest {
    #[prost(int32, tag = "1")]
    pub comp_id: i32,
    #[prost(int32, tag = "2")]
    pub deep: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EqHistory {
    #[prost(int32, tag = "1")]
    pub comp_id: i32,
    #[prost(message, repeated, tag = "2")]
    pub history: ::prost::alloc::vec::Vec<EqHistoryMessage>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoteList {
    #[prost(message, repeated, tag = "1")]
    pub votes: ::prost::alloc::vec::Vec<vote_list::VoteView>,
}
/// Nested message and enum types in `VoteList`.
pub mod vote_list {
    #[derive(serde::Deserialize, serde::Serialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct VoteView {
        /// int32 author_id = 1;
        #[prost(int32, tag = "1")]
        pub message_id: i32,
        #[prost(enumeration = "super::Verification", tag = "2")]
        pub verifyed: i32,
        #[prost(int32, tag = "3")]
        pub mark: i32,
    }
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActiveActionState {
    #[prost(int32, tag = "1")]
    pub qid: i32,
    /// action id
    #[prost(int32, tag = "2")]
    pub aid: i32,
    /// team
    #[prost(message, optional, tag = "3")]
    pub team: ::core::option::Option<super::comp::Team>,
    /// marks
    /// repeated comp.Participant participants = 4;
    /// marks
    #[prost(map = "string, message", tag = "4")]
    pub marks: ::std::collections::HashMap<::prost::alloc::string::String, VoteList>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Verification {
    /// deny
    Block = 0,
    /// ok
    Approve = 1,
    /// before beeing checked
    NotChecked = 2,
}
impl Verification {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Verification::Block => "Block",
            Verification::Approve => "Approve",
            Verification::NotChecked => "NotChecked",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Block" => Some(Self::Block),
            "Approve" => Some(Self::Approve),
            "NotChecked" => Some(Self::NotChecked),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod competition_handler_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct CompetitionHandlerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> CompetitionHandlerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CompetitionHandlerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CompetitionHandlerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// setup competition. Run service for current competition
        pub async fn run(
            &mut self,
            request: impl tonic::IntoRequest<super::super::generic::Id>,
        ) -> std::result::Result<
            tonic::Response<super::super::generic::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/comp_handler.CompetitionHandler/Run",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("comp_handler.CompetitionHandler", "Run"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn stop(
            &mut self,
            request: impl tonic::IntoRequest<super::super::generic::Id>,
        ) -> std::result::Result<
            tonic::Response<super::super::generic::GenericResultMessage>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/comp_handler.CompetitionHandler/Stop",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("comp_handler.CompetitionHandler", "Stop"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn start_eq_message_stream(
            &mut self,
            request: impl tonic::IntoRequest<super::super::generic::Id>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::EqHistoryMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/comp_handler.CompetitionHandler/startEQMessageStream",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "comp_handler.CompetitionHandler",
                        "startEQMessageStream",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn push_eq_message(
            &mut self,
            request: impl tonic::IntoRequest<super::EqMessage>,
        ) -> std::result::Result<
            tonic::Response<super::super::generic::Id>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/comp_handler.CompetitionHandler/pushEQMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("comp_handler.CompetitionHandler", "pushEQMessage"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn pull_eq_message_history(
            &mut self,
            request: impl tonic::IntoRequest<super::EqHistoryRequest>,
        ) -> std::result::Result<tonic::Response<super::EqHistory>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/comp_handler.CompetitionHandler/pullEQMessageHistory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "comp_handler.CompetitionHandler",
                        "pullEQMessageHistory",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
