// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use diesel::{data_types::*, prelude::*};
use crate::schema::*;

use chrono::NaiveDateTime;
#[derive(Queryable,Selectable,Debug,Clone,Insertable, Identifiable)]
#[diesel(table_name = comp_data)]
pub struct CompData {
    pub id: i32,
    pub queues: Vec<u8>,
    pub participants: Vec<u8>,
}

#[derive(Queryable,Selectable,Debug,Clone,Insertable, Identifiable)]
#[diesel(primary_key(uid, cid))]
#[diesel(table_name = comp_staff_links)]
pub struct CompStaffLink {
    pub uid: i32,
    pub cid: i32,
}

#[derive(Queryable,Selectable,Debug,Clone,Insertable, Identifiable)]
#[diesel(table_name = competitions)]
pub struct Competition {
    pub id: i32,
    pub title: String,
    pub public: bool,
    pub organisation: i32,
    pub start_date: Option<NaiveDateTime>,
    pub ends_date: Option<NaiveDateTime>,
    pub place: Option<String>,
    pub descr: Option<String>,
    pub scheme: i32,
    pub status: i32,
}

#[derive(Queryable,Selectable,Debug,Clone,Insertable, Identifiable)]
#[diesel(table_name = organisations)]
pub struct Organisation {
    pub id: i32,
    pub name: String,
    pub owner: i32,
}

#[derive(Queryable,Selectable,Debug,Clone,Insertable, Identifiable)]
#[diesel(table_name = tokens)]
pub struct Token {
    pub id: i32,
    pub hash: String,
    pub ttype: i32,
    pub owner: i32,
    pub sub: String,
    pub created_at: NaiveDateTime,
    pub expire_at: NaiveDateTime,
}

#[derive(Queryable,Selectable,Debug,Clone,Insertable, Identifiable)]
#[diesel(primary_key(uid, oid, perm))]
#[diesel(table_name = user_orgs)]
pub struct UserOrg {
    pub uid: i32,
    pub oid: i32,
    pub perm: String,
}

#[derive(Queryable,Selectable,Debug,Clone,Insertable)]
#[diesel(table_name = users)]
pub struct User {
    pub id: i32,
    pub login: String,
    pub hash: String,
}

