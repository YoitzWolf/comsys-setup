// This file is @generated by prost-build.
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoteMessage {
    /// queue num.
    #[prost(int32, tag = "2")]
    pub queue_id: i32,
    /// team action id
    #[prost(int32, tag = "3")]
    pub action_id: i32,
    /// mark type
    #[prost(string, tag = "4")]
    pub mark_type: ::prost::alloc::string::String,
    /// mark
    #[prost(int32, tag = "5")]
    pub mark: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VerifyVoteMessage {
    /// message id in the competition pool
    #[prost(int32, tag = "1")]
    pub target_message_id: i32,
    #[prost(enumeration = "Verification", tag = "2")]
    pub verdict: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FixVotingMessage {
    #[prost(int32, tag = "1")]
    pub queue_id: i32,
    #[prost(int32, tag = "3")]
    pub action_id: i32,
    #[prost(enumeration = "Verification", tag = "2")]
    pub verdict: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TryNext {
    #[prost(int32, tag = "1")]
    pub queue_id: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlockMessage {
    #[prost(int32, tag = "1")]
    pub queue_id: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeMessage {
    #[prost(int32, tag = "1")]
    pub queue_id: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EqMessage {
    #[prost(int32, tag = "1")]
    pub comp_id: i32,
    #[prost(message, optional, tag = "2")]
    pub author: ::core::option::Option<super::auth::UserView>,
    #[prost(string, tag = "3")]
    pub signature: ::prost::alloc::string::String,
    #[prost(oneof = "eq_message::Message", tags = "4, 5, 6, 7, 8")]
    pub message: ::core::option::Option<eq_message::Message>,
}
/// Nested message and enum types in `EQMessage`.
pub mod eq_message {
    #[derive(serde::Deserialize, serde::Serialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "4")]
        VoteMessage(super::VoteMessage),
        #[prost(message, tag = "5")]
        VerifyMessage(super::VerifyVoteMessage),
        #[prost(message, tag = "6")]
        FixVoting(super::FixVotingMessage),
        #[prost(message, tag = "7")]
        TryNext(super::TryNext),
        /// ChangeMessage skip = 9;
        #[prost(message, tag = "8")]
        Block(super::BlockMessage),
    }
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EqHistoryMessage {
    #[prost(int32, tag = "1")]
    pub message_id: i32,
    #[prost(message, optional, tag = "2")]
    pub message: ::core::option::Option<EqMessage>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EqHistoryRequest {
    #[prost(int32, tag = "1")]
    pub comp_id: i32,
    #[prost(int32, tag = "2")]
    pub deep: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EqHistory {
    #[prost(int32, tag = "1")]
    pub comp_id: i32,
    #[prost(message, repeated, tag = "2")]
    pub history: ::prost::alloc::vec::Vec<EqHistoryMessage>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Verification {
    Block = 0,
    Approve = 1,
}
impl Verification {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Verification::Block => "Block",
            Verification::Approve => "Approve",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Block" => Some(Self::Block),
            "Approve" => Some(Self::Approve),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod competition_handler_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with CompetitionHandlerServer.
    #[async_trait]
    pub trait CompetitionHandler: Send + Sync + 'static {
        /// setup competition. Run service for current competition
        async fn run(
            &self,
            request: tonic::Request<super::super::generic::Id>,
        ) -> std::result::Result<
            tonic::Response<super::super::generic::Empty>,
            tonic::Status,
        >;
        /// Server streaming response type for the startEQMessageStream method.
        type startEQMessageStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::EqHistoryMessage, tonic::Status>,
            >
            + Send
            + 'static;
        async fn start_eq_message_stream(
            &self,
            request: tonic::Request<super::super::generic::Id>,
        ) -> std::result::Result<
            tonic::Response<Self::startEQMessageStreamStream>,
            tonic::Status,
        >;
        async fn push_eq_message(
            &self,
            request: tonic::Request<super::EqMessage>,
        ) -> std::result::Result<
            tonic::Response<super::super::generic::Id>,
            tonic::Status,
        >;
        async fn pull_eq_message_history(
            &self,
            request: tonic::Request<super::EqHistoryRequest>,
        ) -> std::result::Result<tonic::Response<super::EqHistory>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct CompetitionHandlerServer<T: CompetitionHandler> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: CompetitionHandler> CompetitionHandlerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for CompetitionHandlerServer<T>
    where
        T: CompetitionHandler,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/comp_handler.CompetitionHandler/Run" => {
                    #[allow(non_camel_case_types)]
                    struct RunSvc<T: CompetitionHandler>(pub Arc<T>);
                    impl<
                        T: CompetitionHandler,
                    > tonic::server::UnaryService<super::super::generic::Id>
                    for RunSvc<T> {
                        type Response = super::super::generic::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::generic::Id>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CompetitionHandler>::run(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RunSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/comp_handler.CompetitionHandler/startEQMessageStream" => {
                    #[allow(non_camel_case_types)]
                    struct startEQMessageStreamSvc<T: CompetitionHandler>(pub Arc<T>);
                    impl<
                        T: CompetitionHandler,
                    > tonic::server::ServerStreamingService<super::super::generic::Id>
                    for startEQMessageStreamSvc<T> {
                        type Response = super::EqHistoryMessage;
                        type ResponseStream = T::startEQMessageStreamStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::generic::Id>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CompetitionHandler>::start_eq_message_stream(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = startEQMessageStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/comp_handler.CompetitionHandler/pushEQMessage" => {
                    #[allow(non_camel_case_types)]
                    struct pushEQMessageSvc<T: CompetitionHandler>(pub Arc<T>);
                    impl<
                        T: CompetitionHandler,
                    > tonic::server::UnaryService<super::EqMessage>
                    for pushEQMessageSvc<T> {
                        type Response = super::super::generic::Id;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EqMessage>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CompetitionHandler>::push_eq_message(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = pushEQMessageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/comp_handler.CompetitionHandler/pullEQMessageHistory" => {
                    #[allow(non_camel_case_types)]
                    struct pullEQMessageHistorySvc<T: CompetitionHandler>(pub Arc<T>);
                    impl<
                        T: CompetitionHandler,
                    > tonic::server::UnaryService<super::EqHistoryRequest>
                    for pullEQMessageHistorySvc<T> {
                        type Response = super::EqHistory;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EqHistoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CompetitionHandler>::pull_eq_message_history(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = pullEQMessageHistorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: CompetitionHandler> Clone for CompetitionHandlerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: CompetitionHandler> tonic::server::NamedService
    for CompetitionHandlerServer<T> {
        const NAME: &'static str = "comp_handler.CompetitionHandler";
    }
}
