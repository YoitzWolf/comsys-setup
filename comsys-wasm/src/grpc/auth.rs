// This file is @generated by prost-build.
/// Общий класс для Токена. Токены бывают разные. но по сути это всегда просто сгенеренная строка
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Token {
    #[prost(string, tag = "1")]
    pub value: ::prost::alloc::string::String,
    #[prost(enumeration = "TokenType", optional, tag = "2")]
    pub token_type: ::core::option::Option<i32>,
}
/// Сообщение для запроса авторизации через логин/пароль и получения access_token
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthRequest {
    /// логин
    #[prost(string, tag = "1")]
    pub login: ::prost::alloc::string::String,
    /// пароль
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
/// Сообщение для получения токена аунтефикации
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAuthTokenRequest {
    /// Токен доступа, который сервер дает в ответе на AuthRequest
    #[prost(message, optional, tag = "1")]
    pub access_token: ::core::option::Option<Token>,
}
/// Сообщение для обновления access_token
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshAccessTokenRequest {
    /// Токен доступа, который сервер дает в ответе на AuthRequest
    #[prost(message, optional, tag = "1")]
    pub access_token: ::core::option::Option<Token>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DropTokenRequest {
    /// or in metadata
    #[prost(message, optional, tag = "1")]
    pub auth_token: ::core::option::Option<Token>,
    #[prost(message, optional, tag = "2")]
    pub to_drop: ::core::option::Option<Token>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DropResult {
    #[prost(bool, tag = "1")]
    pub is_done: bool,
}
/// Ответ на AuthRequest и GetAuthTokenRequest и тп.
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthResult {
    #[prost(oneof = "auth_result::Result", tags = "1, 3")]
    pub result: ::core::option::Option<auth_result::Result>,
}
/// Nested message and enum types in `AuthResult`.
pub mod auth_result {
    #[derive(serde::Deserialize, serde::Serialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Token(super::Token),
        #[prost(enumeration = "super::AuthFailError", tag = "3")]
        Error(i32),
    }
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRequest {
    /// Стандартный запрос для входа, но для регистрации
    #[prost(message, optional, tag = "1")]
    pub auth_req: ::core::option::Option<AuthRequest>,
    /// Для избегания регистрации кого попало
    #[prost(string, optional, tag = "2")]
    pub supervisor_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RegisterResult {
    /// отправлено ли в обработку supervisor
    #[prost(bool, tag = "1")]
    pub registered: bool,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserView {
    #[prost(int32, tag = "1")]
    pub uid: i32,
    #[prost(string, tag = "2")]
    pub login: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TokenType {
    Access = 0,
    Auth = 1,
    Connection = 3,
}
impl TokenType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TokenType::Access => "Access",
            TokenType::Auth => "Auth",
            TokenType::Connection => "Connection",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Access" => Some(Self::Access),
            "Auth" => Some(Self::Auth),
            "Connection" => Some(Self::Connection),
            _ => None,
        }
    }
}
/// Перечисление ошибок, не связанных с работой сервера, т.е:
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthFailError {
    /// Ошибка с данными, т.е. нет такого соответствия
    InvalidData = 0,
    /// Можно установить, что данные устарели. Исп. для GetAuthTokenRequest
    OutOfDate = 1,
}
impl AuthFailError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AuthFailError::InvalidData => "InvalidData",
            AuthFailError::OutOfDate => "OutOfDate",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "InvalidData" => Some(Self::InvalidData),
            "OutOfDate" => Some(Self::OutOfDate),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod authentication_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct AuthenticationClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> AuthenticationClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AuthenticationClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            AuthenticationClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn authorize(
            &mut self,
            request: impl tonic::IntoRequest<super::AuthRequest>,
        ) -> std::result::Result<tonic::Response<super::AuthResult>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.Authentication/Authorize",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.Authentication", "Authorize"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_auth(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAuthTokenRequest>,
        ) -> std::result::Result<tonic::Response<super::AuthResult>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.Authentication/GetAuth",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.Authentication", "GetAuth"));
            self.inner.unary(req, path, codec).await
        }
        /// May be not implemented:
        pub async fn refresh_access(
            &mut self,
            request: impl tonic::IntoRequest<super::RefreshAccessTokenRequest>,
        ) -> std::result::Result<tonic::Response<super::AuthResult>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.Authentication/RefreshAccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.Authentication", "RefreshAccess"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn drop_token(
            &mut self,
            request: impl tonic::IntoRequest<super::DropTokenRequest>,
        ) -> std::result::Result<tonic::Response<super::DropResult>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.Authentication/DropToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.Authentication", "DropToken"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn registration(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterResult>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.Authentication/Registration",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.Authentication", "Registration"));
            self.inner.unary(req, path, codec).await
        }
    }
}
